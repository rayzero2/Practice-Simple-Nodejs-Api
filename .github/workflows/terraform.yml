# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    name: 'Terraform'
        on:
          push:
            branches:
            - master
          pull_request:
      jobs:
          terraform:
            name: 'Terraform'
            runs-on: ubuntu-20.04
      # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      defaults:
        run:
          shell: bash
      steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
      uses: actions/checkout@v2
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt
      - name: Add & Commit
      # You may pin to the exact commit or the version.
        # uses: EndBug/add-and-commit@b5dec7ea7647ed6edf307ec828d3aeb6bca69f63
        uses: EndBug/add-and-commit@v5.1.0
        with:
      # Arguments for the git add command
        add: '.'
      # The name of the user that will be displayed as the author of the commit
        author_name: 'Patanasak'
      # The email of the user that will be displayed as the author of the commit
        author_email: # optional
      # Name of the branch to use, if different from the one that triggered the workflow
        branch: # optional
      # The directory where your repository is located. You should use actions/checkout first to set it up
        cwd: # optional, default is .
      # The message for the commit
        message: 'ran terraform fmt'
      # Arguments for the git rm command
        remove: # optional
      # Whether to use the --signoff option on git commit
        signoff: # optional
      # Arguments for the git tag command (the tag name always needs to be the first word not preceded by a hyphen)
        tag: # optional


      # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })  

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      
    - name: Azure Pipelines Action
      uses: Azure/pipelines@v1
      with:
        # Fullyqualified URL to the Azure DevOps organization along with project name(eg, https://dev.azure.com/organization/project-name or https://server.example.com:8080/tfs/DefaultCollection/project-name)
        azure-devops-project-url: https://dev.azure.com/int493263011/Terrform_CI
        # Name of the Azure Pipline to be triggered
        azure-pipeline-name: 20210128.1 Set up CI with Azure Pipelines
        # Paste personal access token of the user as value of secret variable:AZURE_DEVOPS_TOKEN
        azure-devops-token: AZURE_DEVOPS_TOKEN
        key: greuktqgtqmbmxvwww6wlt72frhnen74iwrgptrmebee3s2bh4aq
        
    - name: Deploy to Azure Container Instances
      uses: Azure/aci-deploy@v1
      with:
        # Name of the Resource Group in which the Container Instance will be created
        resource-group: INT493
        # The DNS Name Label for Container with Public IP
        dns-name-label: int493.southeastasia.cloudapp.azure.com
        # The URL of a git repository to be mounted as a volume
        gitrepo-url: https://github.com/patanasak/Practice-Simple-Nodejs-Api.git
        # The Number of GPU Resources needed in the Container
        ports: 8080 # optional, default is 80
        registry-username: azureuser # optional, default is 
        # Password to log in Container Image Registry Server
        registry-password: Azureuser123! # optional, default is 
     
